[[python-coding-standards]]
Python Coding Standards
-----------------------

The goal of writing code is to create a seamless integration between
developers' work that leads to easily understandable conventions,
logical flows, and a highly maintainable codebase. The unique qualities
you, as a developer, bring to the project are not expressed as coding
idioms or fancy tricks – we do not strive to win an obfuscated or
fancy-pants coding contest. We strive to make code that can be
immediately understood by our colleagues whenever something needs to be
picked up for further work at a later time and place.

In general, there are a few guiding styles that represent best practices
of writing code and you should generally adhere very closely to them.
Where there is no immediate information about our customization of the
style guide, refer to the published specifications referenced below. At
worst, this will spark a conversation among the team to consider (or
re-consider) a current practice. But generally if we have not defined an
override for a stylistic element, then you are best served to stick with
the common convention and industry-standard best practice.

[[know-and-love-pep-8]]
Know and Love PEP-8
~~~~~~~~~~~~~~~~~~~

The most important thing for you to know as you write Python code is the
importance of PEP-8:

Read the full PEP-8 document before going any further in this document.

In general, we cleave closely to the PEP-8 style guide in order to make
our code more easily picked up by colleagues. To make certain aspects
more specific and clear, below a few of the most important stylistic
elements are called out:

[[tabs-vs.-spaces]]
Tabs vs. Spaces
~~~~~~~~~~~~~~~

Spaces win. Set your editor to equate a press of the "TAB" key with 4
spaces. Code that includes tab-stop characters should be refactored to
eliminate the tab-stop characters. (This actually goes for all code,
including HTML, JS and CSS/SCSS.)

[[line-length]]
Line Length
~~~~~~~~~~~

A line length of 80 characters is preferred. This allows other tools for
code review to display code more easily, and it allows us to support the
greatest flexibility of editors and applications for working with code.

For lines that do not break conveniently – when you would lose
readability or the capability to easily parse a line of code due to
breaking the line – it is acceptable to go up to 120 characters in line
length.

It would be very good to never exceed 120 character line length. The
exception to this rule would be when there is a very negative effect in
breaking the line.

[[naming-conventions]]
Naming Conventions
~~~~~~~~~~~~~~~~~~

It is important to adhere to the guidelines in the PEP-8 Naming
Conventions section so that it is easily understood what kind of object
we are looking at when we see a name.

SPEND A LOT OF TIME THINKING ABOUT HOW YOU NAME THINGS.

Possibly the most important decisions we make as developers is what to
name the things we create. This is never a decision you make alone.
Names should always be vetted by members of the development team with an
eye towards accuracy and clarity. Names should always accurately
represent the thing they name. Whenever possible, names should clue you
into any non-obvious, but important, quality of the object being named.
The goal is to have a clarity of meaning and a consistency of usage
across all applications and within any codebase we create.

It is worthwhile to call out a few of the important factors when
deciding what to name your modules, classes, methods and variables:

* If in doubt, be more verbose
* Everyone has autocomplete (unless they have decided to turn it off),
so there is no excuse about why a short variable will save you more time
to type than a long variable. Spend time thinking of concise, accurate
and clear names for objects.
* Follow the capitalization, underscore, and other guidelines in PEP-8
** These help us know instantly what kind of object we're dealing with.
The value of this cannot be underestimated.
* Control your usage of Nouns, Verbs, Adjectives and Adverbs
** Remember that most class names should be nouns. Most variable names
should also be nouns, although sometimes they should be noun phrases
that include adjectives. Method and function names should generally be
verbs or verb phrases (sometimes with adverbs). The goal is to make code
that reads as close as possible to natural language.
* Control your usage of Plurals and Singulars
** If a name is plural then we expect it to represent a collection of
objects. For most Classes and Objects we will generally use singular
nouns. Variables that represent lists or dictionaries should generally
be plural.

[[encapsulation-and-modularity]]
Encapsulation and Modularity
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Always encapsulate discreet functionality into a single location. There
is never a reason to duplicate functionality in multiple locations, and
it is always a benefit to have reusable components that represent an
isolated piece of logic that can be freely strung together with other
components. Leveraging capabilities of different libraries can provide a
variety of mechanisms to enhance encapsulation and modularity of your
code (in Django, for example, the Form object becomes useful to
encapsulate any logic directly related to processing user-input), so be
on the lookout for opportunities to do so.

Whenever you find logic repeated in code during a code review that
should be called out as a blocker in need of fixing. In extreme
situations, there may be some justification. (One common example of this
is the render_to_response function called at the end of most Django
views – it is generally better for ease of understanding to write the
entire render_to_response function call in the view itself, rather than
abstracting that logic into a one-liner.)

[[project-structure]]
Project Structure
~~~~~~~~~~~~~~~~~

Project structure should conform to python community conventions.

[[import-statements]]
Import Statements
~~~~~~~~~~~~~~~~~

Imports should be specific and well-organized. Whenever possible,
imports should be at the top of the file and only at the top of the
file. Occasionally, it will be necessary to handle imports inside a
function or method to resolve circular dependencies, but this should be
considered a bad code smell and carefully considered.

The following order should be followed:

* System-level module imports
* Third-party module imports
* First-party module imports

Each block of imports should be separated by a blank line, and within
each block the import statements should be alphabetized, like so:

-------------------------------------------------------
import os
import datetime
from module1 import submodule
from module2 import submodule
from mywiserhealth.apps.thatapp.models import modelname
from mywiserhealth.apps.thisapp.models import modelname
 
-------------------------------------------------------

NEVER USE WILDCARD IMPORTS SUCH AS:

------------------------
from modulename import *
------------------------
